import pandas as pd
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt

def load_data(path):
    """
    Load a CSV file and return as a pandas DataFrame.

    Parameters:
    path (str): The path to the CSV file.

    Returns:
    df: pandas DataFrame.
    """
    df = pd.read_csv(path)
    return df

def calculate_missing_values(df, exclude_cols):
    """
    Calculate and return percentage of missing values in each column except those in exclude_cols.

    Parameters:
    df (DataFrame): The DataFrame for which to calculate missing values.
    exclude_cols (list): The list of column names to exclude.

    Returns:
    missing_values_percentage: The percentage of missing values.
    """
    df = df.drop(columns=exclude_cols, errors='ignore')
    missing_values_count = df.isnull().sum()
    total_values = df.shape[0]
    missing_values_percentage = (missing_values_count / total_values) * 100
    return missing_values_percentage


def clean_data(df):
    """
    Clean the DataFrame by removing duplicates and trimming strings.

    Parameters:
    df (DataFrame): The DataFrame to clean.

    Returns:
    df: The cleaned DataFrame.
    """
    df = df.drop_duplicates()
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    return df

def plot_missing_values(missing_values_percentage):
    """
    Plot a bar chart of the percentage of missing values per category.

    Parameters:
    missing_values_percentage (Series): The Series containing the percentage of missing values.

    Returns:
    None
    """
    plt.figure(figsize=(10,8))
    missing_values_percentage.sort_values(ascending=False).plot(kind='bar')
    plt.title('Percentage of missing data per category')
    plt.xlabel('Categories')
    plt.ylabel('Percentage of missing data')
    plt.show()

def calculate_missing_values(df, exclude_cols):
    """
    Calculate and return percentage of missing values in each column except those in exclude_cols.

    Parameters:
    df (DataFrame): The DataFrame for which to calculate missing values.
    exclude_cols (list): The list of column names to exclude.

    Returns:
    missing_values_percentage: The percentage of missing values.
    """
    df = df.drop(columns=exclude_cols, errors='ignore')
    missing_values_count = df.isnull().sum()
    total_values = df.shape[0]
    missing_values_percentage = (missing_values_count / total_values) * 100
    return missing_values_percentage


def fill_missing_values(df):
    """
    Fill missing values in the DataFrame. Numerics are filled with 0, objects with 'unknown'.

    Parameters:
    df (DataFrame): The DataFrame for which to fill missing values.

    Returns:
    df: The DataFrame with filled missing values.
    """
    df.loc[:, df.dtypes == np.float64] = df.loc[:, df.dtypes == np.float64].fillna(0)
    df.loc[:, df.dtypes == np.int64] = df.loc[:, df.dtypes == np.int64].fillna(0)
    df.loc[:, df.dtypes == object] = df.loc[:, df.dtypes == object].fillna('unknown')
    return df

def convert_datatypes(df):
    """
    Convert datatypes of specific columns in the DataFrame.

    Parameters:
    df (DataFrame): The DataFrame for which to convert datatypes.

    Returns:
    df: The DataFrame with converted datatypes.
    """
    df['Zip code'] = df['Zip code'].astype(int)
    df['Subtype of property'] = df['Subtype of property'].astype(str)
    df['Type of Sale'] = df['Type of Sale'].astype(str)
    df['State of the building'] = df['State of the building'].astype(str)
    return df

def one_hot_encode(df):
    """
    Perform one hot encoding on the DataFrame.

    Parameters:
    df (DataFrame): The DataFrame for which to perform one hot encoding.

    Returns:
    df_encoded: The DataFrame after one hot encoding.
    """
    df_encoded = pd.get_dummies(df, columns=['Subtype of property', 'Type of Sale', 'State of the building'])
    return df_encoded

def get_numeric_cols(df_encoded):
    """
    Get list of numeric columns for correlation calculation.

    Parameters:
    df_encoded (DataFrame): The DataFrame from which to get numeric columns.

    Returns:
    numeric_cols: The list of numeric columns.
    """
    numeric_cols = ['Price of property in euro', 'Kitchen', 'Number of bedrooms', 'Living area', 'Terrace area', 'Garden', 'Garden area', 'Surface of the land(or plot of land)', 'Number of facades', 'Swimming pool']

    for col in df_encoded.columns:
        if 'Subtype of property' in col or 'Type of Sale' in col or 'State of the building' in col:
            numeric_cols.append(col)
    
    return numeric_cols

def calculate_corr(df_encoded, numeric_cols):
    """
    Calculate correlation matrix for given DataFrame and columns.

    Parameters:
    df_encoded (DataFrame): The DataFrame for which to calculate correlation.
    numeric_cols (list): The list of columns for which to calculate correlation.

    Returns:
    corr: The correlation matrix.
    """
    corr = df_encoded[numeric_cols].corr()
    return corr

def visualize_corr(corr):
    """
    Visualize a given correlation matrix using plotly.

    Parameters:
    corr (DataFrame): The correlation matrix to visualize.

    Returns:
    None
    """
    fig = px.imshow(corr, title="Correlation matrix between price and variables for all properties in Belgium", zmin=-1, zmax=1)
    fig.show()

if __name__ == "__main__":
    df = load_data("property_data.csv")
    df = clean_data(df)
    exclude_cols = ['Raw num:']
    missing_values_percentage = calculate_missing_values(df, exclude_cols)
    print(missing_values_percentage)
    plot_missing_values(missing_values_percentage)
    df = fill_missing_values(df)
    rows, cols = df.shape
    print(f"The dataset has {rows} rows and {cols} columns.")
    df = convert_datatypes(df)
    df_encoded = one_hot_encode(df)
    numeric_cols = get_numeric_cols(df_encoded)
    corr = calculate_corr(df_encoded, numeric_cols)
    visualize_corr(corr)
